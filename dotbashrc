#echo "bashrc"   # for debugging while setting this up

#### misc #########################################################

if [ $(uname) = "Linux" ]; then
  #echo "Linux"
  BASH_COMPLETION_D="/etc/bash_completion.d/"
  source /etc/bash_completion
else
  # echo "Mac"
  BREW_PREFIX=/usr/local
  export LC_ALL=en_US.UTF-8  # for python click
  BASH_COMPLETION_D="/usr/local/etc/bash_completion.d/"
  eval $(minikube docker-env)
fi


##### alias setup ##################################################

#if [ $(uname) = "Linux" ]; then
  #alias emacs="emacs -nw"
#else
  #alias emacs="open -a /Applications/Emacs.app"
#fi

###### prompt setup ##################################################

# _update_ps1 needs to be the first here b/c it uses $? and this needs
# to be the code from the last run command.  Unset timer needs to be last
# b/c otherwise the trap debug gets called and it already gets a value.
# screen-256color is TERM in iTerm/GNOME Terminal/tmux(b/c we configured that)
# other terms leave prompt as it is (for e.g. vagrant up recognized and
# interact with the prompt)
if [ "$TERM" == "screen-256color" ]; then

  function timer_start {
    timer=${timer:-$SECONDS}
  }

  trap 'timer_start' DEBUG

  function _update_ps1() {
    PS1="$(~/dotfiles-gh/weakline-shell.py --last-status $? --timer $(($SECONDS - $timer)) )"
  }

  echo "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"
  export PROMPT_COMMAND="_update_ps1; history -a; unset timer"
fi

alias ec=emacsclient
alias ect="ec -t"

#curl https://raw.githubusercontent.com/git/git/master/contrib/completion/git-completion.bash -o ~/.git-completion.bash
if [ -f ~/.git-completion.bash ]; then
  . ~/.git-completion.bash
fi


if [ -f ~/dotfiles/maven_bash_completion.bash ]; then
  . ~/dotfiles/maven_bash_completion.bash
fi

if [ -f ~/dotfiles/helm_completion.bash ]; then
   . ~/dotfiles/helm_completion.bash
else
   echo "No helm_completion.bash"
fi

if [ -f $BREW_PREFIX/etc/bash_completion ]; then
. $BREW_PREFIX/etc/bash_completion
fi

if [ -f /etc/bash_completion ]; then
   . /etc/bash_completion
fi

if [ -f ~/dotfiles/kubectl_bash_completion.bash ]; then
. ~/dotfiles/kubectl_bash_completion.bash
else
  echo "No kubectl_bash_completion found"
fi
